7.4.24	reference
9.2.3
9.2.8
9.2.27	enqueue . dequeue
11.1.1	function members
11.1.3
11.1.4
11.1.6	data members
11.1.8	function members . data members
11.1.12	data members
11.1.13	function members
11.1.14	function members . data members
11.1.16	data members
11.1.18	data members
11.1.22	data members
11.1.23
11.1.24	data members
11.1.25	function members
11.1.28	function members . data members
2.1.2	member functions
2.1.3	
2.1.4
2.1.5	member functions
2.1.6	member functions
2.1.11
2.1.12
2.1.13	member functions
2.1.16	
2.1.17
2.1.19	Data members ( attributes ) . member functions
2.1.23	Data members ( attributes )
2.1.24
2.1.28
2.1.30
2.5.1	Unlimited number
2.5.2
2.5.3
2.5.5
2.5.8	Unlimited number
1.2.2	The solution refinement stage ( phase 7 )
1.2.3	
1.2.5	The coding stage ( phase 5 )
1.2.6	The coding stage ( phase 5 ) . the solution refinement stage ( phase 7 )
1.2.10
1.2.16
1.2.17	The coding stage ( phase 5 )
1.2.24	The coding stage ( phase 5 ) . the solution refinement stage ( phase 7 )
1.4.8	At the main function
1.4.13	At the main function
1.4.20	
1.4.23
3.1.1
3.1.2	The name of the function . the types of the parameters
3.1.4
3.1.5	
3.1.6
3.1.7
3.1.8	The name of the function
3.1.9
7.2.1
1.5.1	A location in memory that can store a value
1.5.15 
1.5.13	A location in memory
12.1.15	The address of a location in memory
12.1.19 
6.7.7 
7.1.18	A collection of elements that can be allocated dynamically
7.1.21	allocated dynamically
8.1.3	which has the property that the last item added will be the first to be removed ( or last-in-first-out )
8.1.11 
8.1.25	which has the property that the last item added will be the first to be removed ( or last-in-first-out )
8.1.5 
9.1.22	which has the property that the last item added will be the last to be removed ( or first-in-first-out )
9.1.16 
9.1.27 
10.1.18	which has a special node called root . The rest of the nodes are partitioned into one or more disjoint sets, each set being a tree
10.1.16 
10.1.24	which has a special node called root . The rest of the nodes are partitioned into one or more disjoint sets, each set being a tree
10.3.13 
10.3.9	that has no children
10.4.16 
10.4.20	maximum number of children per node is two
10.5.13	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child
10.5.24	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child
10.6.2	Traverse the left subtree, then the root, then the right subtree
10.6.18 
10.6.4	Traverse the left subtree, then the root, then the right subtree
11.4.10 
11.4.14	The name of the function
11.4.6 
11.5.9 
10.5.19 
1.5.2
1.5.3	
1.5.6	a location in memory that can store a value
1.5.29
12.1.3
12.1.13
12.1.28	the address of a location in memory
7.1.11	allocated dynamically
7.1.20	allocated dynamically
8.1.1	
8.1.2	
8.1.14	
8.1.26
9.1.24
9.1.19
10.1.8
10.1.21	a collection of nodes, which has a special node called root . The rest of the nodes are partitioned into one or more disjoint sets, each set being a tree	
10.3.5	
10.3.18	
2.3.3
2.3.1
2.3.8	A constructor is called whenever an object is created, whereas a function needs to be called explicitly
2.3.22
2.3.23	Constructors do not have return type, but functions have to indicate a return type
2.3.15	Constructors do not have return type, but functions have to indicate a return type
3.5.3
3.5.4	
3.5.8	When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call
3.5.31 When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call	
2.3.2	A function needs to be called explicitly . Constructors do not have return type, but functions have to indicate a return type 
2.3.4	A function needs to be called explicitly . Functions have to indicate a return type
2.3.5	A constructor is called whenever an object is created , whereas a function needs to be called explicitly . Functions have to indicate a return type
2.3.6	A function needs to be called explicitly . Constructors do not have return type, but functions have to indicate a return type
2.3.16
2.3.26
2.3.27	A function needs to be called explicitly . Constructors do not have return type, but functions have to indicate a return type 
2.3.30	Constructors do not have return type, but functions have to indicate a return type
1.6.5	Variables can be declared anywhere in a program . They can be declared inside a function ( local variables )
1.6.7	
1.6.11	Variables can be declared inside a function ( local variables ) or outside the functions ( global variables )
1.6.18	
1.6.29
2.2.5
2.2.14	Data members can be accessed from any member functions inside the class defintion . Local variables can only be accessed inside the member function that defines them
2.2.15	Data members can be accessed from any member functions inside the class defintion
2.6.3
2.6.4	The function definition includes the actual body of the function	
4.4.17	The arrays declared as static are initialized only once, when the function that declares the array it is first called	
4.4.4	The arrays declared as static live throughout the life of the program
1.6.1	Variables can be declared anywhere in a program . They can be declared inside a function ( local variables ) or outside the functions ( global variables )
1.6.14 
1.6.16	Variables can be declared inside a function ( local variables ) or outside the functions ( global variables )
1.6.17	Variables can be declared anywhere in a program . They can be declared inside a function ( local variables ) or outside the functions ( global variables )	
1.6.26	Variables can be declared inside a function ( local variables ) or outside the functions ( global variables )
2.2.3	Local variables can only be accessed inside the member function that defines them	
2.2.4	Data members can be accessed from any member functions inside the class defintion	
2.2.6	Data members can be accessed from any member functions inside the class defintion
2.2.8 
2.2.19	
2.2.26	Data members can be accessed from any member functions inside the class defintion
2.6.2	A function prototype includes the return type, and the parameters's type
2.6.14	
2.6.15
2.6.16	The function definition includes the actual body of the function	
2.6.17	
4.4.1
4.4.16
4.4.21
4.4.26
