7.4.24  linked lists are passed by using pointers.
9.2.8  Remove the item added first, add items to the back. 
11.1.4  Class is user defined. It contains members, data and functions. The keyword class is used and includes brackets ( ) 
11.1.24  A class definition includes the definitions of the class 's constructor ( s ) and any public or private functions. Of course, it also includes the class header and any necessary C libraries
11.1.28  class definitions include the name of the class and type of parameters. 
2.1.2  The attributes of said class are included in a class definition. Also whether or not it is a subclass and whether it is public, private or protected are included in a class definition. 
2.1.3  Information telling the compiler what data members and member functions belong to the class is included in a class definition.
2.1.4  Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers. Example for specifiers would be public, private, and protected. There is the keyword Class and the Class body is enclosed with brackets ( ). 
2.1.5  An object and data are included in a class definition. 
2.1.6  It is specific class name, includes only information defined by that class, implementation details, etc. that are included in a class definition.
2.1.11  Member functions and data members belonging to the class are included in a class definition. 
2.1.12  a public and private area that includes the functions and variables that are used in the class are included in a class definition. 
2.1.13  the keyword class followed by they class name, on the inside you declare public and private declarations of your class. 
2.1.16  the data and methods are included in a class definition. 
2.1.17  A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done are included in a class definition. 
2.1.23  the class name and its public data types such as constructors, methods, functions are included in a class definition. 
2.1.24  a constructor and several data members, and at least one public data member or method are included in a class definition. 
2.1.28  functions and data members that belong to the class are included in a class definition.
2.1.30  A class is an expanded concept of a data structure, it holds both the data and the functions being executed 
2.5.1  Just one constructor can be created per class. 
2.5.2  As many constructors as you want can be created per class so long as they have different parameters. 
2.5.5  In C plus plus, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters. 
2.5.8  One constructor can be created per class. 
1.2.2  The implementation phase and the maintenance phase are effected by the testing stage.
1.2.3  Verification, coding, refining the solution and maintenance are all influenced by the testing stage. 
1.2.5  Refining the solution, Production and Maintenance are all influenced by the Testing stage. 
1.2.6  Elaboration, Construction, and Transition are all affected by testing stage.
1.2.10  Refining and Coding are influenced by testing stage.
1.2.17  Testing, refining, production, and maintenance are influenced by the Testing stage. 
1.2.24  Removing logical errors, testing for valid data, random data and actual data are influenced by the Testing stage. 
1.4.8  C plus plus programs begin to execute in the testing phase. 
1.4.13  C plus plus programs begin to execute at the root. 
1.4.20  After loading the required include statements and libraries, the main method begins the execution. 
1.4.23  C plus plus programs begin execution at the main function. 
3.1.1  A function signature includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does. 
3.1.4  A function signature consists of the function prototype. This tells one the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information. 
3.1.5  A function signature includes the name of the function and the types of its arguments. 
3.1.6  A function signature includes name, paramaters, scope, and other general function information.
3.1.7  A function signature includes a function name and parameter list. It does not include return type. Function signatures must be different. 
3.1.8  A function signature includes input parameters and return type. 
3.1.9  A function signature is the portion of the function prototype that has the function name and the arguments but NOT the return type. 
7.2.1  Elements can be inserted into a linked list at any point. Linked list does not need to be resized unlike an array needs to be. 
1.5.1  Variable can be a integer or a string in a program.  
8.1.3  A stack stores a set of elements in a particular order.  
9.1.16  Queue stores a set of elements in a particular order with a First In, First Out principle. 
10.6.2  The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.  
10.6.4  The inorder traversal of a binary tree is used to visit nodes of a binary search tree in a search key order.  
12.1.28  A pointer is like a variable but only holds an address in memory not the physical address. 
2.3.3  Unlike regular functions, constructors are only used to initialize an object's data when it is created. Constructors must also be given the same name as the class and cannot return any values.    
2.3.1  A constructor initializes an object or objects of a class. A function of a class performs a task such as display a line of text or do some kind of mathematical operations.  
2.3.8  A constructor does not return any date and has no return type. Functions can return date or not return data can have a return type.  
2.3.23  A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data . 
3.5.3  The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.  
3.5.4  Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to types of the parameters.  
3.5.8  Overloaded functions must have the same return type but different input parameters.  
2.3.2  All constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class one is using. One can change how a constructor does something but not what it does. With functions one can change not only the how but also the what.  
2.3.5  Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.  
2.3.16  A constructor initializes data members but the functions actually perform tasks. Constructors cannot return values either.
2.3.26  A constructor cannot return values, it is not even void. It is used to initialize an object's data when it is created . Whereas, a function is created to do a specific task, and it can return values.  
1.6.5  Variables are declared before they are actually used . They can be declared before main ( ) to use globally.  
1.6.7  Variables can be declared globally just before the main method ( but also outside of it ). Alternatively, variables can be subject to only the method they are scoped within, but would still be declared at the beginning of that method ( but inside of it ).   
1.6.11  Variables are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.  
1.6.18  Variables are declared in the declaration of Functions, for statements, and while statements. They are declared in the body of If, For, while, do while, statements, in namespaces, headers, etc ( almost anywhere. ) anywhere in the program. This is as long as it is on its own line. 
1.6.29  It depends if variable is global then variables have to be declared outside the source code to be used in every scope. However a local variable is one declared in a local function. It obviously does not need to be declared outside the variable seeing how it is used for the function or block it is being called for. 
2.2.5  A local variable cannot be accessed outside the function in which it is declared . Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared . 
2.2.15  A data member exists permanently in that program's memory as long as it is run. A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.  
2.6.3  A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.  
2.6.4  Function prototype is a declaration. Function definitions ( with multiple parameters ) often require more than one piece of information to perform their tasks. 
4.4.17  Static arrays are those with a declared size , that is known to the program. Non static arrays leave the size undeclared and open so it can be assigned later . Usually they are used for input purposes. 
4.4.4  A program initializes static local arrays when their declarations are first encountered . If a static array is not initialized explicitly by the programmer , each element of that array is initialized to zero by the compiler when the array is created . Non static array members cannot be initialized at all in C + + . 
1.6.1  Variables can be declared right before they are used. But it is a good practice to declare them at the beginning of the program and label what they are food. 
1.6.14  Global variables are declared in the body of the code. Local variables are declared in the function they are to be used ( unless the function is being passed a variable ) . Variables should always be declared before use. 
1.6.16  In the main function, variables are declared usually at the top of code. They can be declared almost anywhere, but must be declared before the code can use or act upon them. 
1.6.17  Variables can be declared in the very beginning of the program. Before the main ( ) starts. 
1.6.26  Variables are usually declared at the very beginning of a C plus plus program. But it can be declared any in the program as long as they appear before they are called upon. 
2.2.3  Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory. 
2.2.19  Data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes 
2.6.14  A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order. The details for function prototypes are in the function definition. 
2.6.17  The Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product. 
4.4.1  A static array will store the new values that were assigned to each of its elements. Meaning if you call a function twice it will use the last values that were returned the first time. If you do not declare it static then the new values will not be stored and will be reset to their original value. 
4.4.16  A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array 's elements will still be the same when called later unless specifically initialized to something else. This does not happen for automatic arrays. 
4.4.21  When one declares array static the array is not destroyed after the function is over. When an array is not declared as static, the array is created and initialized every time a function calls it. 
4.4.26  Only constants can be used to declare the size of automatic and static arrays. It exists for the duration of the program. It is initialized when its declaration is first encountered. All elements are initialized to zero if not explicitly initialized.
9.2.3  The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.
9.2.27  The two main functions defined by a queue are rear and front.
11.1.1  The elements typically included in a class definition are the name of the class file, the parameters it must take to perform its function. Also it includes a brief description of what the class does. 
11.1.3  The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private. 
11.1.6  The elements typically included in a class definition are the functions and variables used when the object is defined for the class.
11.1.8  The elements typically included in a class definition are return type and input parameters. 
11.1.12  The elements typically included in a class definition are the variables and function prototypes. 
11.1.13  The elements typically included in a class definition are public and private variables and initialization of functions included in the class. 
11.1.14  The elements typically included in a class definition are the return value and the accepted value. 
11.1.16  The elements typically included in a class definition are parameters and their type, Class name, and return type, and the code to be executed in the class.
11.1.18  The elements typically included in a class definition are Constructor, functions, and variables native to the class. 
11.1.22  The elements typically included in a class definition are constructor, and function definitions. 
11.1.23  The elements typically included in a class definition are class name data of class definition of functions and methods. 
11.1.25  The elements typically included in a class definition are Class name, semicolon at the end of the definition, private and public followed by ":". 
2.1.19  A class definition includes public section and private section, and there must be a semicolon to set the end. 
2.5.3  There is no limit to the number of constructors in a class because like functions, constructors can be overloaded. 
1.2.16  Refining, coding are directly influenced by the Testing stage.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase. Production, Maintenance are indirectly influenced by the Testing stage.  Because Refining occurs before these last two stages in the Software Life Cycle. 
3.1.2  A function signature includes the specific information about the function. This specific information is input and output variable types and how many of each. 
1.5.15  A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.  
1.5.13  A variable is a value or word that can assume any of a set of values. 
12.1.19  A pointer is an element that references a memory location.
7.1.18  A linked list is an array based list that uses an implicit ordering scheme, often using pointers.  
7.1.21  A linked list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together.  
8.1.11  A stack is a data type that stores a set of elements in a certain order, last in, first out. 
8.1.5  A stack is a list in which only the top ( or last item added ) can be modified. 
9.1.22  Queue is a buffer, which stores element in a particular order.  
9.1.27  The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear ( end ) of the line and customers come off of the line ( i. e., are serviced ) from the front of the line.  
10.1.18  A tree is a set of data arranged with pointers. Each element can have many pointers, but no two pointers point to the same element.
10.1.16  A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n is greater than or equal to 0 disjoint sets T the n + 1, where each element set is a tree.  
10.3.13  A leaf is the last value in the tree, a value with no children attached .
10.4.16  A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.  
10.4.20  A binary tree is a tree where every parent has only two children.  
10.5.13  A binary search tree is a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.  
10.5.24  Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.  
10.6.18  The inorder traversal of a binary tree is a traversal that visits the left branch first, then the parent node, then the right branch, recursively.
11.4.14  A function signature is the return type and accepted pass value type it takes.  
11.5.9  A recursive function is a function that calls itself. With each function call the problem is diminished . 
10.5.19  A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater than its parent.   
1.5.2  In programming, a variable is a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. 
1.5.3  A variable is a location in memory where a value can be stored. 
1.5.6  A variable is a named object that can hold a numerical or letter value. 
1.5.29  A variable is a method or identifier one would say, one uses to bind a data object to memory location. It is then stored in a location that can be accessed when and manipulated later when the variable name is called. 
12.1.3  A pointer is a variable that stores the address of another variable. 
7.1.11  A linked list is information in memory linked to the next piece of information. It can only be linked forwards and not backwards. 
7.1.20  A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list.  Doubly linked list contains a pointer to the previous object in the list. 
8.1.1  A stack is a data structure for storing items which are to be accessed in last-in first-out order. It can be implemented in three ways. 
8.1.2  A stack is an abstract data type. It is based on the principle that the last element inserted into the stack will be the first element removed from the stack. 
8.1.14  A stack is a list that can be added to or removed from only from the top. 
8.1.26  A stack is a storage container that holds objects in a certain order, which has a LIFO priority. 
9.1.24  A queue is a data structure that removes nodes from the head and adds nodes at the tail. 
9.1.19  A queue is a finite ordered list with zero or more elements, based upon First In First Out. 
10.1.8  A tree is a set of one or more nodes that are hierarchically organized, with one special root node.
10.1.21  A tree is a nonlinear, two-dimensional data structure.
10.3.5  A leaf is an end point of the tree. It is a node that does not have any children.
10.3.18  A leaf is an endpoint on a tree that contains no pointers or pointers that are set to null. 
2.3.22  A constructor is a function used to initialize an object's data when it is created . Its call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.  
2.3.15  A constructor is used to create an object that can be employed in the main function of a program. This may or may not execute code along with it. A function is a set of code that executes when called , but does not create a new object.  
3.5.31  Overloaded function simply involves having a method with the same name within the class. It is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programming.  
2.3.4  A constructor is typically used to intialize data members and allocate resources, for instance memory, files, etc. Also a constructor cannot return values. Functions are operations that maybe globally defined.  
2.3.6  A constructor is a method that starts new instances of a class. ( Example: Employee employee 1 ( parameters ) starts a new instance of object of type Employee ). A function is simply a module within a program that completes its single desired task.      
2.3.27  A constructor initializes an object. A function is part of an object.  
2.3.30  Constructor is a special block of statements called when an object is created , either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code.  
2.2.14  A data member is a more general term describing all objects instantiated within a member function. "Local" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class. Local variables whose scope are in a member function are the same as data members of member functions.  
2.2.4  Data members are variables that represent an attribute in a class definition. Local variables declared in a function body cannot be used outside of that function body. When a function terminates the values of its local variables are lost. 
2.2.6  A data member is part of a C plus plus class or structure that stores data of a certain type. A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome. 
2.2.8  Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates. 
2.2.26  Data members are local variables that are declared in a function definition s body. They cannot be used outside of that function body. When a function terminates, the values of its local variables are lost. 
2.6.2  The FUNCTION PROTOTYPE is where the programmer declares that he or she is using a function other than main ( ) . This is like declaring a variable. The programmer knows that he or she will be using in the future, but has yet to say where they are going to use it, or how. This answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the includes and before main ( ) . The FUNCTION DEFINITION is the guts of the function.  This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main ( ) and any other functions. A function is its own entity and should be thought of as such.
2.6.15  A function definition is the code that defines the function placed in the brackets that determines that function 's operation. A function prototype shows the function 's public interface without exposing implementation. It shows name, return type and type of paramaters. 
2.6.16  A function prototype is just a declaration of the function existing. It cannot be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.  
