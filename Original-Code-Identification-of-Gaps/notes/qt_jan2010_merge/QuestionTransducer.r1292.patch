diff --git a/src/arkref/analysis/NounTypes.java b/src/arkref/analysis/NounTypes.java
index 5f3e59a..ca00b9b 100644
--- a/src/arkref/analysis/NounTypes.java
+++ b/src/arkref/analysis/NounTypes.java
@@ -33,6 +33,8 @@ public class NounTypes {
 		loadTypes("time", timeListPath);
 	}
 	
+	
+	
 	/**
 	 * expects a path to a list of words, one per line
 	 * 
diff --git a/src/arkref/analysis/Types.java b/src/arkref/analysis/Types.java
index 4428cb5..819ba50 100644
--- a/src/arkref/analysis/Types.java
+++ b/src/arkref/analysis/Types.java
@@ -1,5 +1,7 @@
 package arkref.analysis;
 
+import java.util.*;
+
 import arkref.data.FirstNames;
 import arkref.data.Mention;
 import edu.cmu.ark.AnalysisUtilities;
@@ -55,6 +57,9 @@ public class Types {
 			}
 		}
 	}
+
+
+	
 	
 	public static <T> boolean relaxedEquals(T x, T y) {
 		if (x==null || y==null)
@@ -163,13 +168,13 @@ public class Types {
 			return null;
 		}
 		
-		Gender firstNameGender = genderByFirstNames(m);
+		Gender firstNameGender = genderByFirstNamesOrTitles(m);
 		
 		return firstNameGender;
 	}
 
 
-	private static Gender genderByFirstNames(Mention m) {
+	private static Gender genderByFirstNamesOrTitles(Mention m) {
 		if (m.node()==null) return null;  // TODO we can still figure something out, right
 		
 		//Go through all the NNP tokens in the noun phrase and see if any of them
@@ -187,9 +192,9 @@ public class Types {
 				continue;
 			}
 			String genderS = FirstNames.getInstance().getGenderString(leaf.value());
-			if(genderS.equals("Mal")){
+			if(genderS.equals("Mal") || leaf.value().equals("Mr.")){
 				return Gender.Male;
-			}else if(genderS.equals("Fem")){
+			}else if(genderS.equals("Fem") || leaf.value().equals("Mrs.") || leaf.value().equals("Ms.") || leaf.value().equals("Miss")){
 				return Gender.Female;
 			}
 		}
@@ -197,6 +202,33 @@ public class Types {
 		return null;
 	}
 	
+	private static Personhood personhoodByTitle(Mention m) {
+		if (m.node()==null) return null;  // TODO we can still figure something out, right
+		
+		if(personTitles == null){
+			personTitles = new HashSet<String>();
+			String [] personTitlesArray  = {"Mr.","Mrs.","Dr.","Fr.","Drs."};
+			for(int i=0; i<personTitlesArray.length; i++) personTitles.add(personTitlesArray[i].toLowerCase());
+		}
+		
+		Tree head = m.node().headPreTerminal(AnalysisUtilities.getInstance().getHeadFinder());
+		Tree root = m.getSentence().rootNode();
+		
+		for(Tree leaf : m.node().getLeaves()){
+			//System.err.println(head+"\t"+leaf+"\t"+head.parent(root)+"\t"+leaf.parent(root));
+			if(!leaf.parent(m.node()).label().value().equals("NNP") 
+					|| leaf.parent(root).parent(root) != head.parent(root)) //must be a sibling of the head node, as in "(NP (NNP John) (POS 's))"
+			{
+				continue;
+			}
+			if(personTitles.contains(leaf.value().toLowerCase())){
+				return Personhood.Person;
+			}
+		}
+		return Personhood.MaybePerson;
+	}
+
+	
 	
 	public static Personhood personhood(Mention m) {
 		if (isPronominal(m)) {
@@ -206,13 +238,16 @@ public class Types {
 		String t = m.neType();
 		if (t.equals("PERSON") 
 			 || NounTypes.getInstance().getType(m.getHeadWord()).equals("person")
-			 || genderByFirstNames(m) != null)
+			 || genderByFirstNamesOrTitles(m) != null
+			 || personhoodByTitle(m) == Personhood.Person)
 			return Personhood.Person;
 		if (t.equals("O")) 
 			return null;
 		return Personhood.NotPerson;
 	}
 	
+
+
 	public static Personhood personhood(String pronoun) {
 		if (pronoun.matches("^(me|he|him|his|she|her|hers|we|us|our|ours|i|my|mine|you|yours|himself|herself|ourselves|myself)$")) {
 			return Personhood.Person;
@@ -277,4 +312,6 @@ public class Types {
 		return mention.getHeadWord().matches("^(its|his|her|their|our|my)$");
 	}
 
+	private static Set<String> personTitles;
+	
 }
diff --git a/src/edu/cmu/ark/AnalysisUtilities.java b/src/edu/cmu/ark/AnalysisUtilities.java
index 0853c59..9a2bf6c 100644
--- a/src/edu/cmu/ark/AnalysisUtilities.java
+++ b/src/edu/cmu/ark/AnalysisUtilities.java
@@ -231,7 +231,7 @@ public class AnalysisUtilities {
 			client.close();
 			
 			if(lastParseScore > -1000000.0){
-				System.err.println("result (parse):"+result);
+				if(QuestionTransducer.DEBUG) System.err.println("result (parse):"+result);
 				lastParse = readTreeFromString(result);
 				return new ParseResult(true, lastParse, lastParseScore);
 			}
